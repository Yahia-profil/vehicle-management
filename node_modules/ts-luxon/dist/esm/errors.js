class TsLuxonError extends Error {
}
class InvalidDateTimeError extends TsLuxonError {
  constructor(reason) {
    super(`Invalid DateTime: ${reason.toMessage()}`);
  }
}
class InvalidDurationError extends TsLuxonError {
  constructor(reason) {
    super(`Invalid Duration: ${reason.toMessage()}`);
  }
}
class InvalidIntervalError extends TsLuxonError {
  constructor(reason) {
    super(`Invalid Interval: ${reason.toMessage()}`);
  }
}
class InvalidUnitError extends TsLuxonError {
  constructor(unit) {
    super(`Invalid unit ${unit}`);
    Object.setPrototypeOf(this, InvalidUnitError.prototype);
  }
}
class InvalidZoneError extends TsLuxonError {
  constructor(zoneName) {
    super(`${zoneName} is an invalid or unknown zone specifier`);
    Object.setPrototypeOf(this, InvalidZoneError.prototype);
  }
}
class ConflictingSpecificationError extends TsLuxonError {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, ConflictingSpecificationError.prototype);
  }
}
class InvalidArgumentError extends TsLuxonError {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, InvalidArgumentError.prototype);
  }
}
class ZoneIsAbstractError extends TsLuxonError {
  constructor() {
    super("Zone is an abstract class");
    Object.setPrototypeOf(this, ZoneIsAbstractError.prototype);
  }
}
export {
  ConflictingSpecificationError,
  InvalidArgumentError,
  InvalidDateTimeError,
  InvalidDurationError,
  InvalidIntervalError,
  InvalidUnitError,
  InvalidZoneError,
  ZoneIsAbstractError
};
