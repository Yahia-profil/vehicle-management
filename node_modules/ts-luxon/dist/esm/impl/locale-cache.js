function extractDifferentPartValue(longParts, shortParts, fallback) {
  const filteredLongParts = longParts.filter((p) => p.type !== "integer");
  const filteredShortParts = shortParts.filter((p) => p.type !== "integer");
  for (let i = 0; i < Math.min(filteredLongParts.length, filteredShortParts.length); i++) {
    const longPart = filteredLongParts[i];
    const shortPart = filteredShortParts[i];
    if (longPart.value !== shortPart.value) {
      return longPart.value.trim();
    }
  }
  return fallback;
}
class LocaleCache {
  static getCachedDTF(locString, options = {}) {
    const key = JSON.stringify([locString, options]);
    if (!this._intlDTCache.has(key)) {
      this._intlDTCache.set(key, new Intl.DateTimeFormat(locString, options));
    }
    return this._intlDTCache.get(key);
  }
  static getCachedINF(locString, options) {
    const key = JSON.stringify([locString, options]);
    if (!this._intlNumCache.has(key)) {
      let formatter;
      if (options.unit === "quarter") {
        const relativeLongTimeFormatter = new Intl.RelativeTimeFormat(locString, {
          numeric: "always",
          style: "long"
        });
        const relativeShortTimeFormatter = new Intl.RelativeTimeFormat(locString, {
          numeric: "always",
          style: "short"
        });
        const singularLongParts = relativeLongTimeFormatter.formatToParts(1, "quarter");
        const singularShortParts = relativeShortTimeFormatter.formatToParts(1, "quarter");
        const singularUnit = extractDifferentPartValue(singularLongParts, singularShortParts, "quarter");
        const pluralLongParts = relativeLongTimeFormatter.formatToParts(2, "quarter");
        const pluralShortParts = relativeShortTimeFormatter.formatToParts(2, "quarter");
        const pluralUnit = extractDifferentPartValue(pluralLongParts, pluralShortParts, "quarters");
        const numberFormatter = new Intl.NumberFormat(locString, {
          style: "decimal",
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        });
        formatter = {
          format: (value) => {
            const unit = Math.abs(value) === 1 ? singularUnit : pluralUnit;
            return `${numberFormatter.format(value)} ${unit}`;
          },
          formatToParts: (value) => {
            const unit = Math.abs(value) === 1 ? singularUnit : pluralUnit;
            return [{
              type: "literal",
              value: `${numberFormatter.format(value)} ${unit}`
            }];
          },
          resolvedOptions: () => ({
            locale: locString,
            numberingSystem: "latn",
            style: "unit",
            unit: "quarter",
            unitDisplay: "long",
            minimumIntegerDigits: 1,
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
            currencyDisplay: "symbol",
            currencySign: "standard",
            useGrouping: true,
            compactDisplay: "short",
            notation: "standard",
            signDisplay: "auto"
          })
        };
      } else {
        formatter = new Intl.NumberFormat(locString, options);
      }
      this._intlNumCache.set(key, formatter);
    }
    return this._intlNumCache.get(key);
  }
  static getCachedIntResolvedOptions(locString) {
    if (!this._intlResolvedOptionsCache.has(locString)) {
      this._intlResolvedOptionsCache.set(locString, new Intl.DateTimeFormat(locString).resolvedOptions());
    }
    return this._intlResolvedOptionsCache.get(locString);
  }
  static getCachedLF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    if (!this._intlLFCache.has(key)) {
      this._intlLFCache.set(key, new Intl.ListFormat(locString, opts));
    }
    return this._intlLFCache.get(key);
  }
  static getCachedRTF(locale, options = {}) {
    const key = JSON.stringify([locale, options]);
    if (!this._intlRelCache.has(key)) {
      this._intlRelCache.set(key, new Intl.RelativeTimeFormat(locale, options));
    }
    return this._intlRelCache.get(key);
  }
  static reset() {
    this._sysLocaleCache = void 0;
    this._intlLFCache.clear();
    this._intlDTCache.clear();
    this._intlNumCache.clear();
    this._intlRelCache.clear();
    this._intlResolvedOptionsCache.clear();
  }
  static systemLocale() {
    if (!this._sysLocaleCache) {
      this._sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    }
    return this._sysLocaleCache;
  }
}
LocaleCache._intlDTCache = /* @__PURE__ */ new Map();
LocaleCache._intlLFCache = /* @__PURE__ */ new Map();
LocaleCache._intlNumCache = /* @__PURE__ */ new Map();
LocaleCache._intlRelCache = /* @__PURE__ */ new Map();
LocaleCache._intlResolvedOptionsCache = /* @__PURE__ */ new Map();
export {
  LocaleCache
};
